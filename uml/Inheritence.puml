@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # int locationX
    # int locationY
    # int speedX
    # int speedY
    # BufferedImage image
    # int width
    # int height
    # boolean isValid

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# int maxHp
    # int hp
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<Bullet>
 }

abstract class BaseBullet
{
    - int power
    + Bullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet

AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- MobEnemy
AbstractAircraft <|-- Elite

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

class HeroAircraft {
    - int shootNum
    - int power
    - int direction
    -HeroAircraft heroAircraft
    + HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<Bullet>
    + getInstance():HeroAircraft
}

HeroAircraft --> HeroAircraft

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<Bullet>
}

class Elite {
    + Elite(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<Bullet>
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power):void
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power):void
}

class AbstractProp{
    +AbstractProp(int locationX,int locationY,int speedX,int speedY)
    +forward():void
}

AbstractAircraft <|-- AbstractProp
AbstractProp <|--BloodProp
AbstractProp <|--BombProp
AbstractProp <|--BulletProp

class BloodProp{
    +BloodProp(int locationX,int locationY,int speedX,int speedY)
}
class BombProp{
    +BombProp(int locationX,int locationY,int speedX,int speedY)
}
class BulletProp{
     +BulletProp(int locationX,int locationY,int speedX,int speedY)
 }

class BloodPropFactory{
     BloodPropFactory(int locationX,int locationY,int speedX,int speedY)
}
class BombPropFactory{
     BombPropFactory(int locationX,int locationY,int speedX,int speedY)
}
class BulletPropFactory{
     BulletPropFactory(int locationX,int locationY,int speedX,int speedY)
}

class BossFactory{
     BossFactory(int locationX,int locationY,int speedX,int speedY)
}
class MobEnemyFactory{
     MobEnemyFactory(int locationX,int locationY,int speedX,int speedY)
}
class EliteFactory{
     ElitePropFactory(int locationX,int locationY,int speedX,int speedY)
}
interface AbstractAircraftFactory{
    AbstractAircraft create(int locationX,int locationY,int speedX,int speedY)
}

AbstractAircraftFactory ..> AbstractAircraft
BossFactory --> AbstractAircraftFactory
MobEnemyFactory --> AbstractAircraftFactory
EliteFactory --> AbstractAircraftFactory

interface AbstractPropFactory{
    AbstractProp create(int locationX,int locationY,int speedX,int speedY)
}

AbstractPropFactory ..> AbstractProp
BombPropFactory --> AbstractPropFactory
BloodPropFactory --> AbstractPropFactory
BulletPropFactory --> AbstractPropFactory

@enduml